#!/usr/bin/env bash

# # snapdir-test 0.1.1
#
# ## Description:
#
#     Test utilities and runner for snapdir commands.
#
# ## Usage:
#
#     # runs all tests for snapdir
#		  snapdir-test
#
#		  # soucing into an existing script
#     . snapdir-test [sourced-test-file]
#
# This script is intended to be sourced by other scripts to expose the
#	following functions.
#
# - describe: Describes a group of checks.
# - check: Using a check will instruct the test runner to expect
#          a fail/pass. The test runner with grep for "check " entries
#          to guess how many tests are expected to be implemented.
# - fail: Fail the test, shows the message and runs the tear down.
# - pass: Decrement the number of pending tests as tracked by check.
# - run_tests: Runs the tests.
# - run_tests_without_teardown: Runs the tests without tear down.
#
# A temporary directory is created for each test run and can be accessed
# via _SNAPDIR_TEST_TMP_DIR. This directory is removed when the test
# finishes unless tests are run with `run_tests_without_teardown`.
#
#
# ## Options:
#
#     sourced-test-file  When specified, the test file is sourced and
#                        the thest suite will take the basename of the
#                        file as the name of the test suite.
#
# ## Examples:
#
#
#      # Import test utilities
#      # shellcheck disable=SC1091
#      . "$(dirname "${BASH_SOURCE[0]}")/snapdir-test" "${BASH_SOURCE[0]}"
#
#      test_suite() {
#        local result
#
#        describe "group of checks description"
#
#        check "check a"
#        result=$(echo "a" 2>&1 || true)
#        test "$result" == "a" || fail "expected '${result}' to be a" && pass
#
#      }
#
#      run_tests
#
# ## License
#
# LICENSE: MIT Copyright (c) 2022 Bermi Ferrer

set -eEuo pipefail
IFS=$'\n\t'

snapdir_test_run() {
	set -eEuo pipefail
	local dir
	dir="$(dirname "${BASH_SOURCE[0]}")"
	SECONDS=0
	"$dir/snapdir-manifest" test
	"$dir/snapdir" test
	"$dir/snapdir-file-store" test

	# if [[ "${SNAPDIR_B2_STORE_TEST_BUCKET:-}" != "" ]]; then
	# 	"$dir/snapdir-b2-store" test --remote "b2://${SNAPDIR_B2_STORE_TEST_BUCKET}"
	# fi

	echo "# test suite completed in ${SECONDS} seconds"
}

_snapdir_test_utils() {
	# note: using subshell – '(' instead of '{' – to avoid leaking helper functions
	set -eEuo pipefail
	local target_file="${1:?Missing target file}"
	export _TARGET_TEST_FILE="$target_file"
	_SNAPDIR_MODULE_NAME=$(basename "${target_file}")
	export _SNAPDIR_MODULE_NAME

	setup() {
		set -eEuo pipefail

		rm -rf /tmp/"${_SNAPDIR_MODULE_NAME}"_tests*
		_SNAPDIR_TEST_TMP_DIR="$(mktemp -d -t "${_SNAPDIR_MODULE_NAME}"_tests.XXXXXXXXXX)"
		umask 077 "$_SNAPDIR_TEST_TMP_DIR"

		export _SNAPDIR_TEST_TMP_DIR
		export _SNAPDIR_CWD="$_SNAPDIR_TEST_TMP_DIR"
		export _SNAPDIR_CACHE_DIR="${_SNAPDIR_TEST_TMP_DIR}/.cache/${_SNAPDIR_MODULE_NAME}"

		cd "$_SNAPDIR_TEST_TMP_DIR" || return 1

		setup_suite
	}
	_SNAPDIR_TEST_TOTAL_CHECKS=$(grep -c 'check "[^"]*"' "${target_file}" || echo "-1")
	_SNAPDIR_TESTS_PENDING_CHECKS=$_SNAPDIR_TEST_TOTAL_CHECKS
	_SNAPDIR_TEST_SUITE_DESCRIPTION="${_SNAPDIR_MODULE_NAME}"
	_SNAPDIR_TEST_DESCRIPTION=$_SNAPDIR_TEST_SUITE_DESCRIPTION

	if [[ $_SNAPDIR_TESTS_PENDING_CHECKS -lt 0 ]]; then
		echo "not ok 0..0 - no tests found for $_SNAPDIR_TEST_SUITE_DESCRIPTION" >&2
		echo "# could not find 'check \"some test description\"' in '$target_file'." >&2
		exit 1
	fi

	echo "# running tests for ${_SNAPDIR_MODULE_NAME}"
	echo "1..${_SNAPDIR_TEST_TOTAL_CHECKS}"

	_SNAPDIR_TEST_TEARDOWN_COMPLETE=false
	teardown() {
		set -eEuo pipefail
		# return if _SNAPDIR_TEST_TEARDOWN_COMPLETE is already true
		if [[ ${_SNAPDIR_TEST_TEARDOWN_COMPLETE} == true ]]; then
			return 0
		fi
		_SNAPDIR_TEST_TEARDOWN_COMPLETE=true
		teardown_suite
		# exit with not ok if _SNAPDIR_TEST_TOTAL_CHECKS is not zero
		if [[ $_SNAPDIR_TESTS_PENDING_CHECKS -gt 0 ]]; then
			echo "not ok ${_SNAPDIR_TESTS_PENDING_CHECKS}..${_SNAPDIR_TEST_TOTAL_CHECKS} - ${_SNAPDIR_TESTS_PENDING_CHECKS} ${_SNAPDIR_TEST_SUITE_DESCRIPTION} tests pending" >&2
			exit 1
		else
			echo "ok - all $_SNAPDIR_TEST_SUITE_DESCRIPTION tests passed in $SECONDS seconds"
			exit 0
		fi
	}

	describe() {
		set -eEuo pipefail
		_SNAPDIR_TEST_DESCRIPTION="$1"
	}

	_SNAPDIR_TEST_CHECK_LOCKED_UNTIL_PASS=false
	_SNAPDIR_TEST_CHECK_NAME="missing check calls on test"
	check() {
		set -eEuo pipefail
		if [[ $_SNAPDIR_TEST_CHECK_LOCKED_UNTIL_PASS == true ]]; then
			fail "calling check \"$1\" while pending pass is not allowed"
		fi
		_SNAPDIR_TEST_CHECK_LOCKED_UNTIL_PASS=true
		_SNAPDIR_TEST_CHECK_NAME="$1"
	}

	# suites can override setup function to prepare the test environment
	setup_suite() {
		set -eEuo pipefail
	}
	# suites can override teardown function to clean up after tests finished
	teardown_suite() {
		set -eEuo pipefail
	}

	pass() {
		set -eEuo pipefail
		if [[ $_SNAPDIR_TEST_CHECK_LOCKED_UNTIL_PASS == true ]]; then
			_SNAPDIR_TEST_CHECK_LOCKED_UNTIL_PASS=false
			_SNAPDIR_TEST_NUMBER=$((_SNAPDIR_TEST_TOTAL_CHECKS - _SNAPDIR_TESTS_PENDING_CHECKS + 1))
			_SNAPDIR_TESTS_PENDING_CHECKS=$((_SNAPDIR_TESTS_PENDING_CHECKS - 1))
		fi
		echo "ok ${_SNAPDIR_TEST_NUMBER} - ${_SNAPDIR_TEST_DESCRIPTION} / $_SNAPDIR_TEST_CHECK_NAME"
	}

	skip() {
		set -eEuo pipefail
		_SNAPDIR_TEST_CHECK_LOCKED_UNTIL_PASS=false
		_SNAPDIR_TEST_NUMBER=$((_SNAPDIR_TEST_TOTAL_CHECKS - _SNAPDIR_TESTS_PENDING_CHECKS + 1))
		_SNAPDIR_TESTS_PENDING_CHECKS=$((_SNAPDIR_TESTS_PENDING_CHECKS - 1))
		echo "ok ${_SNAPDIR_TEST_NUMBER} - # skip ${_SNAPDIR_TEST_DESCRIPTION} / $_SNAPDIR_TEST_CHECK_NAME"
	}

	fail() {
		set -eEuo pipefail
		_SNAPDIR_TEST_NUMBER=$((_SNAPDIR_TEST_TOTAL_CHECKS - _SNAPDIR_TESTS_PENDING_CHECKS + 1))
		echo "not ok ${_SNAPDIR_TEST_NUMBER} - ${_SNAPDIR_TEST_DESCRIPTION} / $_SNAPDIR_TEST_CHECK_NAME: $*" >&2
		echo "# fail called by: ${_TARGET_TEST_FILE}:$(caller 0 | awk '{print $1}')" >&2
		teardown
		exit 1
	}

	generate_files() {
		local dir=$_SNAPDIR_TEST_TMP_DIR
		mkdir -p "$dir/files/"
		echo "foo" >"$dir/files/foo"
		echo "bar" >"$dir/files/bar"
	}

	generate_nested_files() {
		local dir=$_SNAPDIR_TEST_TMP_DIR
		mkdir -p "$dir/files/a/a1" "$dir/files/b/b1"
		echo "foo" >"$dir/files/a/a1/foo"
		echo "bar" >"$dir/files/b/b1/bar"
	}

	clean_files() {
		rm -rf "$_SNAPDIR_TEST_TMP_DIR/files"
	}

	run_tests() {
		SECONDS=0
		trap teardown EXIT
		setup
		test_suite || {
			teardown
			return 1
		}
		teardown
	}
	run_tests_without_teardown() {
		SECONDS=0
		setup
		test_suite || {
			echo "Left directory $_SNAPDIR_TEST_TMP_DIR untouched." >&2
			return 1
		}
		echo "Left directory $_SNAPDIR_TEST_TMP_DIR untouched." >&2
	}
}

_snapdir_test_help() {
	sed '/# LICENSE: MIT Copyright (c) 2022 Bermi Ferrer/q; 1,2d' "${BASH_SOURCE[0]}" | sed -E 's|^# ?||g; $d' | more
	exit 0
}

# is any of the arguments -h or --help?
if [[ ${1:-} == -h || ${1:-} == --help ]]; then
	_snapdir_test_help
fi

# Run if is not sourced
if [[ ${BASH_SOURCE[0]} == "$0" ]]; then
	snapdir_test_run
elif [[ ${1:-""} != "" ]]; then
	_snapdir_test_utils "${1}"
fi
