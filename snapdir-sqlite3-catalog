#!/usr/bin/env bash

# # snapdir-sqlite3-catalog
#
# Logs manifest and push events to a sqlite3 database and allows
# basic querying of the database.
#
# ## Background:
#
#  This is Reference implementation of snapdir catalog using
#  a local sqlite3 database.
#
# LICENSE: MIT Copyright (c) 2022 Bermi Ferrer

set -eEuo pipefail
IFS=$'\n\t'

snapdir_sqlite3_catalog_log() {
	# Receives a log message from a a snapdir event.
	#
	# This is the only write interface for the catalog and will
	# so far it's only called after manifest generation and
	# store pushing.
	set -eEuo pipefail
	local event="${_SNAPDIR_SQLITE3_CATALOG_EVENT:?Missing --event}"
	local id="${_SNAPDIR_SQLITE3_CATALOG_ID:?Missing --id}"
	local context="${_SNAPDIR_SQLITE3_CATALOG_CONTEXT:?Missing --context}"
	"${SNAPDIR_SQLITE3_BIN}" "${SNAPDIR_SQLITE3_CATALOG_DB_PATH}" <<-EOF
		INSERT INTO snapdir_event_log (event, id, context) VALUES ('${event}', '${id}', '${context}');
	EOF
	snapdir_sqlite3_catalog_save "${context}" "$id"
}

snapdir_sqlite3_catalog_save() {
	# Saves an entry on the snapdir_history table.
	#
	# This is not called directly by snapdir but is called
	# the snapdir_sqlite3_catalog_log function on a new subshell.
	set -eEuo pipefail
	local context="${1:-${_SNAPDIR_SQLITE3_CATALOG_CONTEXT:?Missing --context}}"
	local id="${2:-${_SNAPDIR_SQLITE3_CATALOG_ID:?Missing --id}}"
	local previous_id
	previous_id="$(
		"${SNAPDIR_SQLITE3_BIN}" "${SNAPDIR_SQLITE3_CATALOG_DB_PATH}" <<-EOF
			SELECT id FROM snapdir_history 
				WHERE context='${context}'
			ORDER BY created_at DESC LIMIT 1;
		EOF
	)"
	# subsequent snapdir_history will not be logged
	if [[ ${previous_id} == "${id}" ]]; then
		return 0
	fi
	previous_id="${previous_id:-"NULL"}"
	"${SNAPDIR_SQLITE3_BIN}" "${SNAPDIR_SQLITE3_CATALOG_DB_PATH}" <<-EOF
		INSERT INTO snapdir_history 
			(context, id, previous_id)
		VALUES 
			('$context', '$id', NULLIF('$previous_id', 'NULL'));
	EOF
}

snapdir_sqlite3_catalog_contexts() {
	# Lists contexts tracked by the catalog. These include local directories and stores.
	#
	# Usage:
	#
	#     snapdir-sqlite3-catalog contexts
	#
	# Returns: JSON lines of the form:
	#
	#     {
	#         "created_at": "YYYY-MM-DD HH:MM:SS.SSS",
	#         "id": "${SNAPDIR_ID}",
	#         "context": "${ABSOLUTE_DIR_NAME_OR_STORE_URI}"
	#     }
	#
	# Example:
	#
	#     snapdir-sqlite3-catalog contexts
	#
	set -eEuo pipefail
	"${SNAPDIR_SQLITE3_BIN}" "${SNAPDIR_SQLITE3_CATALOG_DB_PATH}" <<-EOF
		SELECT json_object(
			'created_at', STRFTIME('%Y-%m-%d %H:%M:%f', s1.created_at),
			'id', s1.id,
			'context', s1.context
		)
		FROM snapdir_history s1
			LEFT JOIN snapdir_history s2
				ON s1.context = s2.context
				AND s1.created_at < s2.created_at
		WHERE s2.id IS NULL
	EOF
}

snapdir_sqlite3_catalog_ancestors() {
	# Get a list of ancestor snapdir IDs and the context where they where created.
	#
	# Usage:
	#
	#     snapdir-sqlite3-catalog ancestors \
	#         --id="${SNAPDIR_ID}" \
	#         [--context="${ABSOLUTE_DIR_NAME_OR_STORE_URI}"]
	#
	# Returns: JSON lines of the form:
	#
	#     {
	#         "created_at": "YYYY-MM-DD HH:MM:SS.SSS",
	#         "id": "${PARENT_SNAPDIR_ID}",
	#         "context": "${ABSOLUTE_DIR_NAME_OR_STORE_URI}"
	#     }
	#
	# Examples:
	#
	#     snapdir-sqlite3-catalog ancestors --id="${SNAPDIR_ID}"
	#     snapdir-sqlite3-catalog ancestors --id="${SNAPDIR_ID}" --context="s3://some-bucket/"
	#
	set -eEuo pipefail
	local id="${_SNAPDIR_SQLITE3_CATALOG_ID:?Missing --id}"
	local context="${_SNAPDIR_SQLITE3_CATALOG_CONTEXT:-""}"
	local context_condition=""
	if [[ $context != "" ]]; then
		context_condition=" AND context='${context//\'/\'\'}'"
	fi

	"${SNAPDIR_SQLITE3_BIN}" "${SNAPDIR_SQLITE3_CATALOG_DB_PATH}" <<-EOF
		SELECT json_object(
			'created_at', STRFTIME('%Y-%m-%d %H:%M:%f', created_at),
			'id', previous_id,
			'context', context
		)
		FROM snapdir_history WHERE (
			id = '$id' AND previous_id IS NOT NULL $context_condition
		) ORDER BY created_at DESC;
	EOF
}

snapdir_sqlite3_catalog_revisions() {
	# Get a list of snapdir IDs created on a specific context.
	#
	# Usage:
	#
	#     snapdir-sqlite3-catalog revisions \
	#         --context="${ABSOLUTE_DIR_NAME_OR_STORE_URI}"
	#
	# Returns: JSON lines of the form:
	#
	#     {
	#         "created_at": "YYYY-MM-DD HH:MM:SS.SSS",
	#         "id": "${SNAPDIR_ID}",
	#         "previous_id": "${PREVIOUS_SNAPDIR_ID}",
	#         "context": "${ABSOLUTE_DIR_NAME_OR_STORE_URI}"
	#     }
	#
	# Example:
	#
	#     # Gets a list of revisions stored on a store
	#     snapdir-sqlite3-catalog revisions --context="s3://my-bucket/some/path"
	#
	#     # Gets a list of revisions stored on a local directory
	#     snapdir-sqlite3-catalog revisions --context="/home/user/some/path"
	#
	set -eEuo pipefail
	local context="${_SNAPDIR_SQLITE3_CATALOG_CONTEXT:?Missing --context}"
	"${SNAPDIR_SQLITE3_BIN}" "${SNAPDIR_SQLITE3_CATALOG_DB_PATH}" <<-EOF
		SELECT json_object(
			'created_at', STRFTIME('%Y-%m-%d %H:%M:%f', created_at),
			'id', id,
			'previous_id', previous_id
		)
		FROM snapdir_history WHERE context='$context' ORDER BY created_at DESC;
	EOF
}

_snapdir_sqlite3_catalog_run() (
	set -eEuo pipefail

	# Saves the event into the run log for debugging, documentation, etc.
	if [[ ${ENVIRONMENT:-""} == "test" ]] && [[ ${_SNAPDIR_RUN_LOG_PATH:-""} != "" ]] && test -f "${_SNAPDIR_RUN_LOG_PATH:-""}"; then
		# shellcheck disable=SC2145
		echo "snapdir-sqlite3-catalog ${@}" >>"${_SNAPDIR_RUN_LOG_PATH}"
	fi

	local subcommands="save|revisions|contexts|ancestors|log"
	local boolean_args="debug|verbose"
	local value_required_args="id|context|event"
	local legal_argument_keys="${boolean_args}|${value_required_args}"

	_snapdir_sqlite3_catalog_parse_argument_key() {
		sed -E 's|^--?|_SNAPDIR_SQLITE3_CATALOG_|; s|-|_|g;' <<<"${1^^}"
	}

	_snapdir_sqlite3_catalog_validate_option() {
		set -eEuo pipefail
		grep -q -E "^_SNAPDIR_SQLITE3_CATALOG_(${legal_argument_keys^^})$" <<<"${1}" || {
			echo "error: Unknown option: ${1//_SNAPDIR_SQLITE3_CATALOG_/}" | tr '[:upper:]' '[:lower:]' >&2
			echo "Valid options are: --(${legal_argument_keys})" >&2
			exit 1
		}
	}

	_snapdir_sqlite3_catalog_ensure_db() {
		set -eEuo pipefail
		if test -f "${SNAPDIR_SQLITE3_CATALOG_DB_PATH}"; then
			# if "${SNAPDIR_SQLITE3_CATALOG_DB_PATH}" is older than "${_SNAPDIR_BIN_DIR}/snapdir"
			# attempt to set the version
			if [[ ${SNAPDIR_SQLITE3_CATALOG_DB_PATH} -ot "${_SNAPDIR_BIN_DIR}/snapdir" ]]; then
				# Updates the version so that we can determine the
				# version in which each snapdir_history entry was created.
				"${SNAPDIR_SQLITE3_BIN}" "${SNAPDIR_SQLITE3_CATALOG_DB_PATH}" <<-EOF
					INSERT OR IGNORE INTO snapdir_system (version) VALUES ("${_SNAPDIR_VERSION}");
				EOF
			fi
			return 0
		fi
		mkdir -p "$(dirname "${SNAPDIR_SQLITE3_CATALOG_DB_PATH}")"
		# creates a sqlite3 db with the following tables:
		# - snapdir_history: id, previous_id, dirname, created_at
		"${SNAPDIR_SQLITE3_BIN}" "${SNAPDIR_SQLITE3_CATALOG_DB_PATH}" <<-EOF
			CREATE TABLE snapdir_system (
				version TEXT CHECK(length(version) < 16),
				created_at DATETIME DEFAULT(STRFTIME('%Y-%m-%d %H:%M:%f', 'NOW')),
				PRIMARY KEY (version, created_at)
			);
			CREATE TABLE snapdir_event_log (
				event TEXT NOT NULL CHECK(length(event) <= 128),
				id TEXT NOT NULL CHECK(length(id) = 64),
				context TEXT NOT NULL CHECK(length(context) < 4096),
				created_at DATETIME DEFAULT(STRFTIME('%Y-%m-%d %H:%M:%f', 'NOW'))
			);
			CREATE TABLE snapdir_history (
				id TEXT NOT NULL CHECK(length(id) = 64),
				previous_id TEXT CHECK(length(previous_id) = 64),
				context TEXT NOT NULL CHECK(length(context) < 4096),
				created_at DATETIME DEFAULT(STRFTIME('%Y-%m-%d %H:%M:%f', 'NOW'))
			);
		EOF

		# Sets the version of the db to help with upgrades
		"${SNAPDIR_SQLITE3_BIN}" "${SNAPDIR_SQLITE3_CATALOG_DB_PATH}" <<-EOF
			INSERT INTO snapdir_system (version) VALUES ("${_SNAPDIR_VERSION}");
		EOF
	}

	_snapdir_sqlite3_catalog_help() {
		_snapdir_sqlite3_catalog_export_env_defaults
		local command="${1:-""}"
		if [[ ${command} == "" ]]; then
			sed '/# LICENSE: MIT Copyright (c) 2022 Bermi Ferrer/q; 1,2d' "$_SNAPDIR_SQLITE3_CATALOG_BIN_PATH" | sed -E 's|^# ?||g; $d' | more
		else
			_snapdir_command_help "snapdir_sqlite3_catalog_${command//-/_}" <"$_SNAPDIR_SQLITE3_CATALOG_BIN_PATH" | more
		fi
		exit 0
	}

	local command=""
	local positional_args=""
	local key
	local value
	local is_boolean
	local subcommand_candidate="${1:-"$command"}"
	local show_help=false

	while [ $# -gt 0 ]; do
		case "$1" in
		save | revisions | contexts | ancestors | log | test)
			command="$1"
			shift
			;;
		help | -h | --help)
			show_help=true
			shift
			;;
		version | -v | --version)
			echo "${_SNAPDIR_VERSION}"
			exit 0
			;;
		# export all --*=* flags as _SNAPDIR_SQLITE3_CATALOG_* env vars
		--*=* | -*=*)
			key="$(_snapdir_sqlite3_catalog_parse_argument_key "${1%%=*}")"
			_snapdir_sqlite3_catalog_validate_option "$key"
			export "$key"="${1#*=}"
			shift
			;;
		# export all --* * flags as _SNAPDIR_SQLITE3_CATALOG_* env vars
		--*)
			is_boolean=$(grep -q -E "^--?(${boolean_args})$" <<<"${1}" && echo true || echo false)
			key="$(_snapdir_sqlite3_catalog_parse_argument_key "${1}")"
			_snapdir_sqlite3_catalog_validate_option "$key"
			shift
			value="${1:-true}"
			# if key is in boolean_args
			if [[ ${is_boolean} == "false" ]] && [[ ${value:0:1} != "-" ]]; then
				# since this might be the last arg, this will always be truthy
				shift || true
			else
				value="true"
			fi
			export "${key}"="${value}"
			;;
		*)
			positional_args="${positional_args}${1} "
			shift
			;;
		esac
	done

	if [[ ${show_help} == "true" ]]; then
		_snapdir_sqlite3_catalog_help "$command"
	fi

	# if command is not set, show help
	if [[ ${command:-""} == "" ]]; then
		echo "Uknown command '$subcommand_candidate'. Valid commands are: ${subcommands}" >&2
		echo "Try: snapdir-sqlite3-catalog --help" >&2
		return 1
	fi

	_snapdir_sqlite3_catalog_export_env_defaults
	# env | grep _snapdir_sqlite3_catalog_ | sort
	eval "snapdir_sqlite3_catalog_${command//-/_} $positional_args ${*:2}"
)

_snapdir_sqlite3_catalog_export_env_defaults() {
	# Environment variables
	set -eEuo pipefail
	local default_catalog_path="${HOME:-~}/.snapdir/catalog-${ENVIRONMENT:-production}.sqlite3.db"
	SNAPDIR_SQLITE3_CATALOG_DB_PATH="${SNAPDIR_SQLITE3_CATALOG_DB_PATH:-$default_catalog_path}"
	export SNAPDIR_SQLITE3_CATALOG_DB_PATH
	_snapdir_sqlite3_catalog_ensure_db
}

#       ####### #######  #####  #######  #####
#          #    #       #     #    #    #     #
#          #    #       #          #    #
#          #    #####    #####     #     #####
#          #    #             #    #          #
#          #    #       #     #    #    #     #
#          #    #######  #####     #     #####
snapdir_sqlite3_catalog_test() (
	# note: using subshell – '(' instead of '{' – to avoid leaking helper functions
	set -eEuo pipefail

	# Import test utilities
	# shellcheck disable=SC1091 source=./snapdir-test
	. "${_SNAPDIR_BIN_DIR}/snapdir-test" "${_SNAPDIR_SQLITE3_CATALOG_BIN_PATH}"

	teardown_suite() {
		rm -rf "$_SNAPDIR_TEST_TMP_DIR/catalog"
	}

	test_suite() {
		set -eEuo pipefail
		local catalog="$_SNAPDIR_SQLITE3_CATALOG_BIN_PATH"
		export SNAPDIR_SQLITE3_CATALOG_DB_PATH="${_SNAPDIR_TEST_TMP_DIR}/catalog.db"
		local result
		_snapdir_sqlite3_catalog_export_env_defaults

		# --------------------------------------------------------------------------------
		# log events
		# --------------------------------------------------------------------------------
		describe "log"

		check "should prevent invalid id"
		result=$("$catalog" log --event "manifest" --context "/foo/bar" --id "invalid" 2>&1 || echo "")
		grep -E -q "CHECK.+failed" <<<"$result" || fail "Expected error message for id. Got: '$result'" && pass

		check "should save event"
		result=$("$catalog" log --event "manifest" --context "s3://foo" --id "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" 2>&1 || echo "")
		test "$result" == "" || fail "Unexpected output: '$result'"
		test "$("$SNAPDIR_SQLITE3_BIN" "$SNAPDIR_SQLITE3_CATALOG_DB_PATH" "select event,id,context from snapdir_event_log")" == "manifest|aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa|s3://foo" && pass

		# --------------------------------------------------------------------------------
		"$catalog" log --event "manifest" --context "s3://bar" --id "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
		"$catalog" log --event "manifest" --context "/local/foo" --id "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
		"$catalog" log --event "manifest" --context "/local/foo" --id "bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"
		"$catalog" log --event "manifest" --context "/local/foo" --id "cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc"
		"$catalog" log --event "manifest" --context "s3://bar" --id "cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc"
		# --------------------------------------------------------------------------------

		local contexts
		contexts="$("$catalog" contexts)"

		describe "contexts"
		check "include content names"
		grep -q "s3://foo" <<<"$contexts" || fail "Expected context 's3://foo'. Got: '$contexts'"
		grep -q "s3://bar" <<<"$contexts" || fail "Expected context 's3://foo'. Got: '$contexts'"
		grep -q "/local/foo" <<<"$contexts" || fail "Expected context 's3://foo'. Got: '$contexts'" && pass

		check "include latest ids"
		grep "s3://foo" <<<"$contexts" | grep -q "aaaaaa" || fail "Expected context 's3://foo' to have ID aaaaaa.... Got: '$contexts'"
		grep "s3://bar" <<<"$contexts" | grep -q "cccccc" || fail "Expected context 's3://bar' to have ID cccc.... Got: '$contexts'"
		grep "/local/foo" <<<"$contexts" | grep -q "cccccc" || fail "Expected context '/local/foo' to have ID cccc.... Got: '$contexts'" && pass

		check "total number of contexts"
		test "$(echo "$contexts" | grep -c .)" == "3" || fail "Found more contexts than expected." && pass

		describe "ancestors"

		check "should return empty list for a root id"
		result="$("$catalog" ancestors --id aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa)"
		test "$result" == "" || fail "Unexpected output: '$result'" && pass

		result="$("$catalog" ancestors --id cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc)"
		check "should include all ancestors"
		grep "s3://bar" <<<"$result" | grep -q "aaaaaaa" || fail "Expected ancestor 'aaaaaa...'. Got: '$result'"
		grep "/local/foo" <<<"$result" | grep -q "bbbbbbb" || fail "Expected ancestor 'bbbb...'. Got: '$result'"
		test "$(echo "$result" | grep -c .)" == "2" || fail "Found more ancestors than expected."
		pass

		result="$("$catalog" ancestors --context "s3://bar" --id cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc)"
		check "should include only ancestors in a given context"
		grep "s3://bar" <<<"$result" | grep -q "aaaaaaa" || fail "Expected ancestor 'aaaaaa...'. Got: '$result'"
		test "$(echo "$result" | grep -c .)" == "1" || fail "Found more ancestors than expected."
		pass

		describe "revisions"

		check "should not return revisions for an invalid context"
		result="$("$catalog" revisions --context "/not/avail" 2>&1 || echo "")"
		test "$result" == "" || fail "Unexpected output: '$result'" && pass

		check "should return revisions for a valid context"
		result="$("$catalog" revisions --context "s3://bar" 2>&1 || echo "")"
		grep 'id":"ccc' <<<"$result" | grep -q 'previous_id":"aaaaa' || fail "Expected id 'ccc...' with previous_id 'aaa...'. Got: '$result'"
		grep 'id":"aaa' <<<"$result" | grep -q 'previous_id":null' || fail "Expected id 'aaa...' with previous_id 'null'. Got: '$result'"
		test "$(echo "$result" | grep -c .)" == "2" || fail "Found more revisions than expected."
		pass

	}

	run_tests
	# run_tests_without_teardown
)

if [[ "$(uname -s)" == "Darwin" ]]; then
	_snapdir_sqlite3_catalog_readlink() {
		echo "$(cd "$(dirname "$1")" || echo "" && pwd)/$(basename "$1")"
	}
else

	_snapdir_sqlite3_catalog_readlink() {
		readlink -f "$1"
	}
fi

#######
#       #    # ##### #####  #   # #####   ####  # #    # #####
#       ##   #   #   #    #  # #  #    # #    # # ##   #   #
#####   # #  #   #   #    #   #   #    # #    # # # #  #   #
#       #  # #   #   #####    #   #####  #    # # #  # #   #
#       #   ##   #   #   #    #   #      #    # # #   ##   #
####### #    #   #   #    #   #   #       ####  # #    #   #

# Run if is not sourced
if [[ ${BASH_SOURCE[0]} == "$0" ]]; then
	# Get the absolute path to ${BASH_SOURCE[0]}
	export _SNAPDIR_SQLITE3_CATALOG_BIN_PATH="${_SNAPDIR_SQLITE3_CATALOG_BIN_PATH:-$(_snapdir_sqlite3_catalog_readlink "${BASH_SOURCE[0]}")}"
	# import snapdir functions and environment variables,
	# we'll need them to resolve context, logging and testing.
	_SNAPDIR_BIN_PATH="$(dirname "${_SNAPDIR_SQLITE3_CATALOG_BIN_PATH}")/snapdir"
	SNAPDIR_SQLITE3_BIN="${SNAPDIR_SQLITE3_BIN:-$(command -v sqlite3 2>/dev/null || echo "")}"
	if ! test -f "$_SNAPDIR_BIN_PATH"; then
		if snapdir -v 2>/dev/null >/dev/null; then
			_SNAPDIR_BIN_PATH="snapdir"
		else
			echo "error: Could not find snapdir binary"
			exit 1
		fi
	fi
	if [[ "$SNAPDIR_SQLITE3_BIN" == "" ]]; then
		echo "error: sqlite3 is not installed and it's required for the disk catalog." >&2
		exit 1
	fi
	# we don't want snapdir to capture the stdin for the catalog script
	# shellcheck disable=SC1090
	. "$_SNAPDIR_BIN_PATH" <<<""
	_snapdir_sqlite3_catalog_run "${@:1}"
else
	_snapdir_sqlite3_catalog_export_env_defaults
fi
